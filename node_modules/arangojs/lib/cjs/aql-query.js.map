{"version":3,"file":"aql-query.js","sourceRoot":"","sources":["../../src/aql-query.ts"],"names":[],"mappings":";;AAAA,6CAAoE;AAkBpE,oBAA2B,KAAU;IACnC,OAAO,OAAO,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;AACzD,CAAC;AAFD,gCAEC;AAED,sBAA6B,OAAY;IACvC,OAAO,OAAO,CAAC,OAAO,IAAI,OAAO,OAAO,CAAC,KAAK,KAAK,UAAU,CAAC,CAAC;AACjE,CAAC;AAFD,oCAEC;AAED,aACE,OAA6B,EAC7B,GAAG,IAAgB;IAEnB,MAAM,QAAQ,GAAyB,EAAE,CAAC;IAC1C,MAAM,QAAQ,GAAG,EAAE,CAAC;IACpB,IAAI,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACpC,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACzB,IAAI,KAAK,GAAG,QAAQ,CAAC;QACrB,IAAI,YAAY,CAAC,QAAQ,CAAC,EAAE;YAC1B,KAAK,IAAI,GAAG,QAAQ,CAAC,KAAK,EAAE,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;YAChD,SAAS;SACV;QACD,MAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACzC,MAAM,OAAO,GAAG,KAAK,KAAK,CAAC,CAAC,CAAC;QAC7B,IAAI,IAAI,GAAG,QAAQ,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;QACvD,IAAI,+BAAkB,CAAC,QAAQ,CAAC,EAAE;YAChC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;YAClB,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC;SACvB;QACD,IAAI,CAAC,OAAO,EAAE;YACZ,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxB,QAAQ,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;SACxB;QACD,KAAK,IAAI,IAAI,IAAI,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;KACtC;IACD,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;AAC7B,CAAC;AA5BD,kBA4BC;AAED,WAAiB,GAAG;IACL,WAAO,GAAG,CAAC,KAAU,EAAc,EAAE,CAAC,CAAC;QAClD,KAAK;YACH,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;QACvB,CAAC;KACF,CAAC,CAAC;AACL,CAAC,EANgB,GAAG,GAAH,WAAG,KAAH,WAAG,QAMnB","sourcesContent":["import { ArangoCollection, isArangoCollection } from \"./collection\";\n\nexport interface AqlQuery {\n  query: string;\n  bindVars: { [key: string]: any };\n}\n\nexport interface AqlLiteral {\n  toAQL: () => string;\n}\n\nexport type AqlValue =\n  | string\n  | number\n  | boolean\n  | ArangoCollection\n  | AqlLiteral;\n\nexport function isAqlQuery(query: any): query is AqlQuery {\n  return Boolean(query && query.query && query.bindVars);\n}\n\nexport function isAqlLiteral(literal: any): literal is AqlLiteral {\n  return Boolean(literal && typeof literal.toAQL === \"function\");\n}\n\nexport function aql(\n  strings: TemplateStringsArray,\n  ...args: AqlValue[]\n): AqlQuery {\n  const bindVars: AqlQuery[\"bindVars\"] = {};\n  const bindVals = [];\n  let query = strings[0];\n  for (let i = 0; i < args.length; i++) {\n    const rawValue = args[i];\n    let value = rawValue;\n    if (isAqlLiteral(rawValue)) {\n      query += `${rawValue.toAQL()}${strings[i + 1]}`;\n      continue;\n    }\n    const index = bindVals.indexOf(rawValue);\n    const isKnown = index !== -1;\n    let name = `value${isKnown ? index : bindVals.length}`;\n    if (isArangoCollection(rawValue)) {\n      name = `@${name}`;\n      value = rawValue.name;\n    }\n    if (!isKnown) {\n      bindVals.push(rawValue);\n      bindVars[name] = value;\n    }\n    query += `@${name}${strings[i + 1]}`;\n  }\n  return { query, bindVars };\n}\n\nexport namespace aql {\n  export const literal = (value: any): AqlLiteral => ({\n    toAQL() {\n      return String(value);\n    }\n  });\n}\n"]}